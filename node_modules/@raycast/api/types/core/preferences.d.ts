/**
 * A record type holding the preferences (entered in Raycast Preferences) that have been passed to the command.
 */
export declare type Preferences = Record<string, Preference>;
/**
 * Holds data about a single preference item (entered in Raycast Preferences).
 *
 * @remarks
 * The object maps to a defined preference in the `package.json` manifest file.
 */
export interface Preference {
    /**
     * The name of the preference.
     */
    name: string;
    /**
     * The type of the preference.
     */
    type: "appPicker" | "checkbox" | "dropdown" | "password" | "textfield";
    /**
     * Specifies if the preference is required.
     *
     * @remarks
     * If the preference is required, an onboarding view is shown when the
     * extension is opened for the first time.
     *
     * @defaultValue false
     */
    required: boolean;
    /**
     * The title of the preference.
     *
     * @remarks
     * The title is also shown in the Raycast preferences.
     */
    title: string;
    /**
     * The description of the preference.
     *
     * @remarks
     * The description is shown in the Raycast preferences as well as in the
     * onboarding view for required preferences.
     */
    description: string;
    /**
     * The value of the preference.
     */
    value?: unknown;
    /**
     * The default value of the preference if there is no `value` specified.
     * For dropdowns, this references the `value` property of an object in the data array.
     * For app pickers, this references an application name, bundleId or path."
     */
    default?: unknown;
    /**
     * A placeholder that is used for text fields and passwords.
     */
    placeholder?: string;
    /**
     * A label that is used for checkboxes.
     * You can create checkbox groups by setting this property and leaving the title property empty for all checkboxes except the first.
     */
    label?: string;
    /**
     * The data that is used for dropdowns.
     * For the dropdown items, add an array of objects with `title` and `value` properties, such as: `{"title": "Foo", "value": "bar"}`
     */
    data?: unknown[];
}
