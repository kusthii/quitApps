import { ReactNode } from "react";
import { Clipboard, Keyboard, LocalStorage } from "./app";
import { Action, ActionPanel, Form, List, Detail } from "./components";
import { randomId as _randomId, useId as _useId, render as _render } from "./internal";
import { Alert, Toast as _Toast, Image, Color } from "./ui";
import { Preference as _Preference, Preferences as _Preferences } from "../core/preferences";
/*********************************
 * Deprecated on v1.28.0
 *********************************/
/**
 * @deprecated Use `Clipboard.copy` instead
 */
export declare const copyTextToClipboard: typeof Clipboard.copy;
/**
 * @deprecated Use `Clipboard.clear` instead
 */
export declare const clearClipboard: typeof Clipboard.clear;
/**
 * @deprecated Use `Clipboard.paste` instead
 */
export declare const pasteText: typeof Clipboard.paste;
/**
 * @deprecated Use `LocalStorage.allItems` instead
 */
export declare const allLocalStorageItems: typeof LocalStorage.allItems;
/**
 * @deprecated Use `LocalStorage.getItem` instead
 */
export declare const getLocalStorageItem: typeof LocalStorage.getItem;
/**
 * @deprecated Use `LocalStorage.setItem` instead
 */
export declare const setLocalStorageItem: typeof LocalStorage.setItem;
/**
 * @deprecated Use `LocalStorage.removeItem` instead
 */
export declare const removeLocalStorageItem: typeof LocalStorage.removeItem;
/**
 * @deprecated Use `LocalStorage.clear` instead
 */
export declare const clearLocalStorage: typeof LocalStorage.clear;
/**
 * @deprecated Use `LocalStorage.Value` instead
 */
export declare type LocalStorageValue = LocalStorage.Value;
/**
 * @deprecated Use `LocalStorage.Values` instead
 */
export interface LocalStorageValues extends LocalStorage.Values {
}
/**
 * @deprecated Use `Keyboard.Shortcut` instead
 */
export interface KeyboardShortcut extends Keyboard.Shortcut {
}
/**
 * @deprecated
 */
export declare const specialKeys: Record<string, string>;
/**
 * @deprecated Use `Keyboard.KeyModifier` instead
 */
export declare type KeyModifier = Keyboard.KeyModifier;
/**
 * @deprecated Use `Keyboard.KeyEquivalent` instead
 */
export declare type KeyEquivalent = Keyboard.KeyEquivalent;
/**
 * @deprecated Use `getPreferenceValues()` instead.
 */
export declare type Preferences = _Preferences;
/**
 * @deprecated Use `getPreferenceValues()` instead.
 */
export interface Preference extends _Preference {
}
/**
 * @deprecated Use `getPreferenceValues()` instead.
 */
export declare const preferences: _Preferences;
/**
 * @deprecated Use `Action.CopyToClipboard` instead.
 */
export declare const CopyToClipboardAction: typeof import("./components/actions/CopyToClipboardAction").CopyToClipboardAction;
/**
 * @deprecated Use `Action.CopyToClipboard.Props` instead.
 */
export interface CopyToClipboardActionProps extends Action.CopyToClipboard.Props {
}
/**
 * @deprecated Use `Action.Open` instead.
 */
export declare const OpenAction: typeof import("./components/actions/OpenAction").OpenAction;
/**
 * @deprecated Use `Action.Open.Props` instead.
 */
export interface OpenActionProps extends Action.Open.Props {
}
/**
 * @deprecated Use `Action.OpenInBrowser` instead.
 */
export declare const OpenInBrowserAction: typeof import("./components/actions/OpenInBrowserAction").OpenInBrowserAction;
/**
 * @deprecated Use `Action.OpenInBrowser.Props` instead.
 */
export interface OpenInBrowserActionProps extends Action.OpenInBrowser.Props {
}
/**
 * @deprecated Use `Action.OpenWith` instead.
 */
export declare const OpenWithAction: typeof import("./components/actions/OpenWithAction").OpenWithAction;
/**
 * @deprecated Use `Action.OpenWith.Props` instead.
 */
export interface OpenWithActionProps extends Action.OpenWith.Props {
}
/**
 * @deprecated Use `Action.Paste` instead.
 */
export declare const PasteAction: typeof import("./components/actions/PasteAction").PasteAction;
/**
 * @deprecated Use `Action.Paste.Props` instead.
 */
export interface PasteActionProps extends Action.Paste.Props {
}
/**
 * @deprecated Use `Action.Push` instead.
 */
export declare const PushAction: typeof import("./components/actions/PushAction").PushAction;
/**
 * @deprecated Use `Action.Push.Props` instead.
 */
export interface PushActionProps extends Action.Push.Props {
}
/**
 * @deprecated Use `Action.ShowInFinder` instead.
 */
export declare const ShowInFinderAction: typeof import("./components/actions/ShowInFinderAction").ShowInFinderAction;
/**
 * @deprecated Use `Action.ShowInFinder.Props` instead.
 */
export interface ShowInFinderActionProps extends Action.ShowInFinder.Props {
}
/**
 * @deprecated Use `Action.SubmitForm` instead.
 */
export declare const SubmitFormAction: typeof import("./components/actions/SubmitFormAction").SubmitFormAction;
/**
 * @deprecated Use `Action.SunmitForm.Props` instead.
 */
export interface SubmitFormActionProps<T> extends Action.SubmitForm.Props<T> {
}
/**
 * @deprecated Use `Action.Trash` instead.
 */
export declare const TrashAction: typeof import("./components/actions/TrashAction").TrashAction;
/**
 * @deprecated Use `Action.Trash.Props` instead.
 */
export interface TrashActionProps extends Action.Trash.Props {
}
/**
 * @deprecated Use `ActionPanel.Props` instead.
 */
export interface ActionPanelProps extends ActionPanel.Props {
}
/**
 * @deprecated Use `ActionPanel.Children` instead.
 */
export declare type ActionPanelChildren = ActionPanel.Children;
/**
 * @deprecated Use `Action` instead.
 */
export declare const ActionPanelItem: typeof Action;
/**
 * @deprecated Use `Action.Props` instead.
 */
export interface ActionPanelItemProps extends Action.Props {
}
/**
 * @deprecated Use `ActionPanel.Submenu` instead.
 */
export declare const ActionPanelSubmenu: typeof ActionPanel.Submenu;
/**
 * @deprecated Use `ActionPanel.Submenu.Props` instead.
 */
export interface ActionPanelSubmenuProps extends ActionPanel.Submenu.Props {
}
/**
 * @deprecated Use `ActionPanel.Section` instead.
 */
export declare const ActionPanelSection: typeof ActionPanel.Section;
/**
 * @deprecated Use `ActionPanel.Section.Props` instead.
 */
export interface ActionPanelSectionProps extends ActionPanel.Section.Props {
}
/**
 * @deprecated Use `ActionPanel.Section.Children` instead.
 */
export declare type ActionPanelSectionChildren = ActionPanel.Section.Children;
/**
 * @deprecated Use `Detail.Props` instead.
 */
export interface DetailProps extends Detail.Props {
}
/**
 * @deprecated Use `Form.Value` instead.
 */
export declare type FormValue = Form.Value;
/**
 * @deprecated Use `Form.Values` instead.
 */
export interface FormValues extends Form.Values {
}
/**
 * @deprecated Use `Form.Props` instead.
 */
export interface FormProps extends Form.Props {
}
/**
 * @deprecated Use `Form.ItemProps` instead.
 */
export interface FormItemProps<Value extends Form.Value> extends Form.ItemProps<Value> {
}
/**
 * @deprecated Use `Form.Dropdown.Section` instead.
 */
export declare const FormDropdownSection: typeof Form.Dropdown.Section;
/**
 * @deprecated Use `Form.Dropdown.Section.Props` instead.
 */
export interface FormDropdownSectionProps extends Form.Dropdown.Section.Props {
}
/**
 * @deprecated Use `Form.Dropdown.Item` instead.
 */
export declare const FormDropdownItem: typeof Form.Dropdown.Item;
/**
 * @deprecated Use `Form.Dropdown.Item.Props` instead.
 */
export interface FormDropdownItemProps extends Form.Dropdown.Item.Props {
}
/**
 * @deprecated Use `Form.TagPicker.Item` instead.
 */
export declare const FormTagPickerItem: typeof Form.TagPicker.Item;
/**
 * @deprecated Use `Form.TagPicker.Item.Props` instead.
 */
export interface FormTagPickerItemProps extends Form.TagPicker.Item.Props {
}
/**
 * @deprecated Use `Form.TextField` instead.
 */
export declare const FormTextField: typeof Form.TextField;
/**
 * @deprecated Use `Form.TextField.Props` instead.
 */
export interface FormTextFieldProps extends Form.TextField.Props {
}
/**
 * @deprecated Use `Form.TextArea` instead.
 */
export declare const FormTextArea: typeof Form.TextArea;
/**
 * @deprecated Use `Form.TextArea.Props` instead.
 */
export interface FormTextAreaProps extends Form.TextArea.Props {
}
/**
 * @deprecated Use `Form.Checkbox` instead.
 */
export declare const FormCheckbox: typeof Form.Checkbox;
/**
 * @deprecated Use `Form.Checkbox.Props` instead.
 */
export interface FormCheckboxProps extends Form.Checkbox.Props {
}
/**
 * @deprecated Use `Form.DatePicker` instead.
 */
export declare const FormDatePicker: typeof Form.DatePicker;
/**
 * @deprecated Use `Form.DatePicker.Props` instead.
 */
export interface FormDatePickerProps extends Form.DatePicker.Props {
}
/**
 * @deprecated Use `Form.Separator` instead.
 */
export declare const FormSeparator: typeof Form.Separator;
/**
 * @deprecated Use `Form.Separator.Props` instead.
 */
export interface FormSeparatorProps extends Form.Separator.Props {
}
/**
 * @deprecated Use `Form.Dropdown` instead.
 */
export declare const FormDropdown: typeof Form.Dropdown;
/**
 * @deprecated Use `Form.Dropdown.Props` instead.
 */
export interface FormDropdownProps extends Form.Dropdown.Props {
}
/**
 * @deprecated Use `Form.TagPicker` instead.
 */
export declare const FormTagPicker: typeof Form.TagPicker;
/**
 * @deprecated Use `Form.TagPicker.Props` instead.
 */
export interface FormTagPickerProps extends Form.TagPicker.Props {
}
/**
 * @deprecated Use `List.Props` instead.
 */
export interface ListProps extends List.Props {
}
/**
 * @deprecated Use `List.Section` instead.
 */
export declare const ListSection: typeof List.Section;
/**
 * @deprecated Use `List.Section.Props` instead.
 */
export interface ListSectionProps extends List.Section.Props {
}
/**
 * @deprecated Use `List.item` instead.
 */
export declare const ListItem: typeof List.Item;
/**
 * @deprecated Use `List.Item.Props` instead.
 */
export interface ListItemProps extends List.Item.Props {
}
/**
 * @deprecated Add `nanoid` as a dependency and use it instead.
 */
export declare const randomId: typeof _randomId;
/**
 * @deprecated
 */
export declare const useId: typeof _useId;
/**
 * @deprecated
 */
export declare function useActionPanel(): ActionPanelState;
/**
 * @deprecated
 */
export interface ActionPanelState {
    /**
     * @deprecated
     */
    update: (actionPanel: ReactNode) => void;
}
/**
 * @deprecated Use `Alert.Options` instead
 */
export interface AlertOptions extends Alert.Options {
}
/**
 * @deprecated Use `Alert.ActionOptions` instead
 */
export interface AlertActionOptions extends Alert.ActionOptions {
}
/**
 * @deprecated Use `Alert.ActionStyle` instead
 */
export declare const AlertActionStyle: typeof Alert.ActionStyle;
/**
 * @deprecated Use `Toast.Options` instead
 */
export interface ToastOptions extends _Toast.Options {
}
/**
 * @deprecated Use `Toast.ActionOptions` instead
 */
export interface ToastActionOptions extends _Toast.ActionOptions {
}
/**
 * @deprecated Use `Toast.Style` instead
 */
export declare const ToastStyle: typeof _Toast.Style;
/**
 * @deprecated Use `Image.ImageLike` instead
 */
export declare type ImageLike = Image.ImageLike;
/**
 * @deprecated Use `Image.Source` instead
 */
export declare type ImageSource = Image.Source;
/**
 * @deprecated Use `Image.Mask` instead
 */
export declare type ImageMask = Image.Mask;
/**
 * @deprecated Use `Image.Mask` instead
 */
export declare const ImageMask: typeof Image.Mask;
/**
 * @deprecated Use `Color.Dynamic` instead
 */
export declare type DynamicColor = Color.Dynamic;
/**
 * @deprecated Use `Color.ColorLike` instead
 */
export declare type ColorLike = Color.ColorLike;
/**
 * @deprecated Use `export default function Command() { ... }` instead
 */
export declare const render: typeof _render;
