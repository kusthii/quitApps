import React, { ReactElement, ReactNode } from "react";
import { ActionsInterface, NavigationChildInterface } from "./types";
import PropTypes from "prop-types";
import { Color, Image } from "../ui";
/**
 * Renders a markdown (CommonMark) string.
 *
 * @remarks
 * Typically used as a standalone view or when navigating from a {@link List}.
 *
 * @example
 * ```typescript
 * import { Detail } from "@raycast/api";
 *
 * export default function Command() {
 *   return <Detail markdown="**Hello** _World_!" />;
 * }
 * ```
 */
export declare function Detail(props: Detail.Props): ReactElement<Detail.Props>;
export declare namespace Detail {
    var propTypes: {
        navigationTitle: PropTypes.Requireable<string>;
        isLoading: PropTypes.Requireable<boolean>;
        markdown: PropTypes.Requireable<string>;
        metadata: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    var displayName: string;
}
/**
 * See {@link Detail.Metadata}
 */
declare function DetailMetadata(props: Detail.Metadata.Props): ReactElement<Detail.Metadata.Props>;
declare namespace DetailMetadata {
    var propTypes: {};
    var displayName: string;
}
/**
 * See {@link Detail.Metadata.Label}
 */
declare function DetailMetadataLabel(props: Detail.Metadata.Label.Props): ReactElement<Detail.Metadata.Label.Props> | null;
declare namespace DetailMetadataLabel {
    var propTypes: {
        title: PropTypes.Validator<string>;
        icon: PropTypes.Requireable<string | Required<PropTypes.InferProps<{
            fileIcon: PropTypes.Validator<string>;
        }>> | PropTypes.InferProps<{
            source: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            fallback: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            mask: PropTypes.Requireable<Image.Mask>;
            tintColor: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
                adjustContrast: PropTypes.Requireable<boolean>;
            }>>;
        }>>;
        text: PropTypes.Requireable<string>;
    };
    var displayName: string;
}
/**
 * See {@link Detail.Metadata.Separator}
 */
declare function DetailMetadataSeparator(props: Detail.Metadata.Separator.Props): ReactElement<Detail.Metadata.Separator.Props>;
declare namespace DetailMetadataSeparator {
    var propTypes: {};
    var displayName: string;
}
/**
 * See {@link Detail.Metadata.Link}
 */
declare function DetailMetadataLink(props: Detail.Metadata.Link.Props): ReactElement<Detail.Metadata.Link.Props>;
declare namespace DetailMetadataLink {
    var propTypes: {
        title: PropTypes.Validator<string>;
        target: PropTypes.Validator<string>;
        text: PropTypes.Validator<string>;
    };
    var displayName: string;
}
/**
 * See {@link Detail.Metadata.TagList}
 */
declare function DetailMetadataTagList(props: Detail.Metadata.TagList.Props): ReactElement<Detail.Metadata.TagList.Props>;
declare namespace DetailMetadataTagList {
    var propTypes: {
        title: PropTypes.Validator<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    var displayName: string;
}
/**
 * See {@link Detail.Metadata.TagList.Item}
 */
declare function DetailMetadataTagListItem(props: Detail.Metadata.TagList.Item.Props): ReactElement<Detail.Metadata.TagList.Item.Props>;
declare namespace DetailMetadataTagListItem {
    var propTypes: {
        text: PropTypes.Validator<string>;
        icon: PropTypes.Requireable<string | Required<PropTypes.InferProps<{
            fileIcon: PropTypes.Validator<string>;
        }>> | PropTypes.InferProps<{
            source: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            fallback: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            mask: PropTypes.Requireable<Image.Mask>;
            tintColor: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
                adjustContrast: PropTypes.Requireable<boolean>;
            }>>;
        }>>;
        color: PropTypes.Requireable<string | PropTypes.InferProps<{
            light: PropTypes.Validator<string>;
            dark: PropTypes.Validator<string>;
            adjustContrast: PropTypes.Requireable<boolean>;
        }>>;
    };
    var displayName: string;
}
export declare namespace Detail {
    /**
     * Props of the {@link Detail} React component.
     */
    interface Props extends ActionsInterface, NavigationChildInterface {
        /**
         * The CommonMark string to be rendered.
         */
        markdown?: string | null;
        /**
         * The `Detail.Metadata` to be rendered in the right side area
         */
        metadata?: React.ReactNode;
    }
    /**
     * A Metadata view that will be shown in the right-hand-side of the `Detail`.
     *
     * Use it to display additional structured data about the main content shown in the `Detail` view.
     */
    const Metadata: typeof DetailMetadata;
    namespace Metadata {
        /**
         * Props of the {@link Detail.Metadata} React component.
         */
        interface Props {
            /**
             * The Detail.Metadata.Item elements of the Metadata view.
             */
            children: React.ReactNode;
        }
        /**
         * Props of the Detail.Metadata.Item React component.
         */
        interface ItemProps {
            /**
             * The title shown above the item.
             */
            title: string;
        }
        namespace Label {
            /**
             * Props of the {@link Detail.Metadata.Label} React component.
             */
            interface Props extends ItemProps {
                /**
                 * An icon to illustrate the value of the item.
                 */
                icon?: Image.ImageLike;
                /**
                 * The text value of the item.
                 */
                text?: string;
            }
        }
        namespace Separator {
            /**
             * Props of the {@link Detail.Metadata.Separator} React component.
             */
            interface Props {
            }
        }
        namespace Link {
            /**
             * Props of the {@link Detail.Metadata.Link} React component.
             */
            interface Props extends ItemProps {
                /**
                 * The target of the link.
                 */
                target: string;
                /**
                 * The text value of the item.
                 */
                text: string;
            }
        }
        namespace TagList {
            /**
             * Props of the {@link Detail.Metadata.TagList} React component.
             */
            interface Props extends ItemProps {
                /**
                 * The tags contained in the TagList.
                 */
                children: ReactNode;
            }
            namespace Item {
                /**
                 * Props of the {@link Detail.Metadata.TagList.Item} React component.
                 */
                interface Props {
                    /**
                     * An optional icon in front of the text of the tag.
                     */
                    icon?: Image.ImageLike;
                    /**
                     * The text of the tag.
                     */
                    text: string;
                    /**
                     * Changes the text color to the provided color and sets a transparent background with the same color.
                     */
                    color?: Color.ColorLike;
                }
            }
        }
    }
}
declare namespace DetailMetadataTagList {
    /**
     * A Tag in a {@link Detail.Metadata.TagList}.
     */
    const Item: typeof DetailMetadataTagListItem;
}
declare namespace DetailMetadata {
    /**
     * A single value with an optional icon.
     */
    const Label: typeof DetailMetadataLabel;
    /**
     * A metadata item that shows a separator line. Use it for grouping and visually separating metadata items.
     */
    const Separator: typeof DetailMetadataSeparator;
    /**
     * An item to display a link.
     */
    const Link: typeof DetailMetadataLink;
    /**
     * A list of {@link Detail.Metadata.TagList.Item} displayed in a row.
     */
    const TagList: typeof DetailMetadataTagList;
}
export {};
