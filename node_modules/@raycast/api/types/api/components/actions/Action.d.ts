import { ReactElement } from "react";
import PropTypes from "prop-types";
import { Keyboard } from "../../app";
import { Image } from "../../ui";
import { CopyToClipboardAction, CopyToClipboardActionProps } from "./CopyToClipboardAction";
import { CreateQuicklinkAction, CreateQuicklinkProps } from "./CreateQuicklinkAction";
import { CreateSnippetAction, CreateSnippetProps } from "./CreateSnippetAction";
import { OpenAction, OpenActionProps } from "./OpenAction";
import { OpenInBrowserAction, OpenInBrowserActionProps } from "./OpenInBrowserAction";
import { OpenWithAction, OpenWithActionProps } from "./OpenWithAction";
import { PasteAction, PasteActionProps } from "./PasteAction";
import { PushAction, PushActionProps } from "./PushAction";
import { ShowInFinderAction, ShowInFinderActionProps } from "./ShowInFinderAction";
import { SubmitFormAction, SubmitFormActionProps } from "./SubmitFormAction";
import { TrashAction, TrashActionProps } from "./TrashAction";
/**
 * A context-specific action that can be performed by the user.
 *
 * @remarks
 * Assign keyboard shortcuts to items to make it easier for users to perform frequently used actions.
 *
 * @example
 * ```typescript
 * import { ActionPanel, Action, List } from "@raycast/api";
 *
 * export default function Command() {
 *   return (
 *     <List navigationTitle="Open Pull Requests">
 *       <List.Item
 *         title="Docs: Update API Reference"
 *         subtitle="#1"
 *         actions={
 *           <ActionPanel title="#1 in raycast/extensions">
 *             <Action.OpenInBrowser url="https://github.com/raycast/extensions/pull/1" />
 *             <Action.CopyToClipboard title="Copy Pull Request Number" content="#1" />
 *             <Action title="Close Pull Request" onAction={() => console.log("Close PR #1")} />
 *           </ActionPanel>
 *         }
 *       />
 *     </List>
 *   );
 * }
 * ```
 */
export declare function Action(props: Action.Props): ReactElement<Action.Props>;
export declare namespace Action {
    var propTypes: {
        id: PropTypes.Requireable<string>;
        title: PropTypes.Validator<string>;
        icon: PropTypes.Requireable<string | Required<PropTypes.InferProps<{
            fileIcon: PropTypes.Validator<string>;
        }>> | PropTypes.InferProps<{
            source: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            fallback: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            mask: PropTypes.Requireable<Image.Mask>;
            tintColor: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
                adjustContrast: PropTypes.Requireable<boolean>;
            }>>;
        }>>;
        shortcut: PropTypes.Requireable<Required<PropTypes.InferProps<{
            modifiers: PropTypes.Validator<string[]>;
            key: PropTypes.Validator<string>;
        }>>>;
        onAction: PropTypes.Requireable<(...args: any[]) => any>;
    };
    var displayName: string;
}
export declare namespace Action {
    /**
     * Action that copies the content to the clipboard.
     *
     * @remarks
     * The main window is closed, and a HUD is shown after the content was copied to the clipboard.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Action, Detail } from "@raycast/api";
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Press `⌘ + .` and share some love."
     *       actions={
     *         <ActionPanel>
     *           <Action.CopyToClipboard content="I ❤️ Raycast" shortcut={{ modifiers: ["cmd"], key: "." }} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const CopyToClipboard: typeof CopyToClipboardAction;
    /**
     * An action to open a file or folder with a specific application, just as if you had double-clicked the
     * file's icon.
     *
     * @remarks
     * The main window is closed after the file is opened.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Detail, Action } from "@raycast/api";
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Check out your extension code."
     *       actions={
     *         <ActionPanel>
     *           <Action.Open title="Open Folder" target={__dirname} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const Open: typeof OpenAction;
    /**
     * Action that opens a URL in the default browser.
     *
     * @remarks
     * The main window is closed after the URL is opened in the browser.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Detail, Action } from "@raycast/api";
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Join the gang!"
     *       actions={
     *         <ActionPanel>
     *           <Action.OpenInBrowser url="https://raycast.com/jobs" />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const OpenInBrowser: typeof OpenInBrowserAction;
    /**
     * Action that opens a file or folder with a specific application.
     *
     * @remarks
     * The action opens a sub-menu with all applications that can open the file or folder.
     * The main window is closed after the file is opened in the specified application.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Detail, Action } from "@raycast/api";
     * import { homedir } from "os";
     *
     * const DESKTOP_DIR = `${homedir()}/Desktop`;
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="What do you want to use to open your desktop with?"
     *       actions={
     *         <ActionPanel>
     *           <Action.OpenWith path={DESKTOP_DIR} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const OpenWith: typeof OpenWithAction;
    /**
     * Action that pastes the content to the front-most applications.
     *
     * @remarks
     * The main window is closed after the content is pasted to the front-most application.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Detail, Action } from "@raycast/api";
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Let us know what you think about the Raycast API?"
     *       actions={
     *         <ActionPanel>
     *           <Action.Paste content="api@raycast.com" />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const Paste: typeof PasteAction;
    /**
     * Action that pushes a new view to the navigation stack.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Detail, Action } from "@raycast/api";
     *
     * function Ping() {
     *   return (
     *     <Detail
     *       markdown="Ping"
     *       actions={
     *         <ActionPanel>
     *           <Action.Push title="Push Pong" target={<Pong />} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     *
     * function Pong() {
     *   return <Detail markdown="Pong" />;
     * }
     *
     * export default function Command() {
     *   return <Ping />;
     * }
     * ```
     */
    const Push: typeof PushAction;
    /**
     * Action that shows a file or folder in the Finder.
     *
     * @remarks
     * The main window is closed after the file or folder is revealed in the Finder.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Detail, Action } from "@raycast/api";
     * import { homedir } from "os";
     *
     * const DOWNLOADS_DIR = `${homedir()}/Downloads`;
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Are your downloads pilling up again?"
     *       actions={
     *         <ActionPanel>
     *           <Action.ShowInFinder path={DOWNLOADS_DIR} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const ShowInFinder: typeof ShowInFinderAction;
    /**
     * Action that adds a submit handler for capturing form values.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Form, Action } from "@raycast/api";
     * import { useState } from "react";
     *
     * export default function Command() {
     *   const [name, setName] = useState<string>();
     *
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Name" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.TextField id="name" value={name} onChange={setName} />
     *     </Form>
     *   );
     * }
     * ```
     */
    const SubmitForm: typeof SubmitFormAction;
    /**
     * Action that moves a file or folder to the Trash.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Detail, Action } from "@raycast/api";
     * import { homedir } from "os";
     *
     * const FILE = `${homedir()}/Downloads/get-rid-of-me.txt`;
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Some spring cleaning?"
     *       actions={
     *         <ActionPanel>
     *           <Action.Trash paths={FILE} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const Trash: typeof TrashAction;
    /**
     * Action that navigates to the the Create Snippet command with some or all of the fields prefilled.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Detail, Action } from "@raycast/api";
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Test out snippet creation"
     *       actions={
     *         <ActionPanel>
     *           <Action.CreateSnippet snippet={{ text: "DE75512108001245126199" }} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const CreateSnippet: typeof CreateSnippetAction;
    /**
     * Action that navigates to the the Create Quicklink command with some or all of the fields prefilled.
     *
     * @example
     * ```typescript
     * import { ActionPanel, Detail, Action } from "@raycast/api";
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Test out quicklink creation"
     *       actions={
     *         <ActionPanel>
     *           <Action.CreateQuicklink quicklink={{ link: "https://duckduckgo.com/?q={Query}" }} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const CreateQuicklink: typeof CreateQuicklinkAction;
    /**
     * Props of the {@link Action} React component.
     */
    interface Props {
        /**
         * ID of the item.
         *
         * @remarks
         * Make sure to assign each section or item a unique ID. If no ID is specified, a memoized auto-generated is used.
         */
        id?: string;
        /**
         * The title displayed for the item.
         */
        title: string;
        /**
         * The icon displayed for the action.
         */
        icon?: Image.ImageLike;
        /**
         * The keyboard shortcut for the item.
         *
         * @remarks
         * The first and second action in an {@link ActionPanel} become the primary and secondary action. They automatically get the default keyboard shortcuts assigned.
         * In {@link List} and {@link Detail}, this is `↵` for the primary and `⌘` `↵` for the secondary action. In {@link Form} it's `⌘` `↵` for the primary and `⌘` `⇧` `↵` for the secondary.
         */
        shortcut?: Keyboard.Shortcut;
        /**
         * Callback that is triggered when the item is selected.
         */
        onAction?: () => void;
    }
    namespace CreateQuicklink {
        /**
         * Props of the {@link Action.CreateQuicklink} React component.
         */
        type Props = CreateQuicklinkProps;
    }
    namespace CreateSnippet {
        /**
         * Props of the {@link Action.CreateSnippet} React component.
         */
        type Props = CreateSnippetProps;
    }
    namespace CopyToClipboard {
        /**
         * Props of the {@link Action.CopyToClipboard} React component.
         */
        type Props = CopyToClipboardActionProps;
    }
    namespace Open {
        /**
         * Props of the {@link Action.Open} React component.
         */
        type Props = OpenActionProps;
    }
    namespace OpenInBrowser {
        /**
         * Props of the {@link Action.OpenInBrowser} React component.
         */
        type Props = OpenInBrowserActionProps;
    }
    namespace OpenWith {
        /**
         * Props of the {@link Action.OpenWith} React component.
         */
        type Props = OpenWithActionProps;
    }
    namespace Paste {
        /**
         * Props of the {@link Action.Paste} React component.
         */
        type Props = PasteActionProps;
    }
    namespace Push {
        /**
         * Props of the {@link Action.Push} React component.
         */
        type Props = PushActionProps;
    }
    namespace ShowInFinder {
        /**
         * Props of the {@link Action.ShowInFinder} React component.
         */
        type Props = ShowInFinderActionProps;
    }
    namespace SubmitForm {
        /**
         * Props of the {@link Action.SubmitForm} React component.
         */
        type Props<T> = SubmitFormActionProps<T>;
    }
    namespace Trash {
        /**
         * Props of the {@link Action.Trash} React component.
         */
        type Props = TrashActionProps;
    }
}
