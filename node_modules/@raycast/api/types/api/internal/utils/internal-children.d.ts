import { ReactNode } from "react";
import { RaycastElement } from "../rendering/node-builders/types";
/**
 * Users are expected to pass some components as props.
 * However, because internally we take that prop and pass it as a child (to go throught the react reconciler),
 * it means that a user could also pass the component as a child instead of using the prop.
 *
 * To circumvent this, in development mode we wrap the components passed as a prop with an `internal` flag context;
 *
 * Components that can be "internal" must listen to this context and pass it as a prop so that during
 * reconciliation, if the flag is falsy the component is not added to the render tree and a warning is printed.
 */
export declare const InternalChildContext: import("react").Context<boolean>;
/**
 * Method to wrap a component prop with the internal dev flag
 * @see {@link InternalChildContext}
 */
export declare function propToInternalChild(prop?: ReactNode): {};
/**
 * Check if the child has the internal flag set.
 * Output a warning otherwise.
 */
export declare function internalChildInvariant(child: RaycastElement, warning: string): boolean;
export declare type MaybeInternalComponent<T> = T & {
    internal?: boolean;
};
