/// <reference types="node" />
import { PathLike } from "fs";
/**
 * Closes the main Raycast window.
 *
 * @param options - Can be used to clear the root search. Defaults to not clearing the root search after
 * the window was closed.
 * @returns A Promise that resolves when the main window is closed.
 *
 * @example
 * ```typescript
 * import { closeMainWindow } from "@raycast/api";
 * import { setTimeout } from "timers/promises";
 *
 * export default async () => {
 *   await setTimeout(1000);
 *   await closeMainWindow({ clearRootSearch: true });
 * };
 * ```
 */
export declare function closeMainWindow(options?: {
    clearRootSearch?: boolean;
}): Promise<void>;
/**
 * Pops the navigation stack back to root search.
 *
 * @param options - Can be used to clear the search bar. Defaults to clearing the search bar after popped to root.
 * @returns A Promise that resolves when Raycast popped to root.
 *
 * @example
 * ```typescript
 * import { Detail, popToRoot } from "@raycast/api";
 * import { useEffect } from "react";
 * import { setTimeout } from "timers";
 *
 * export default function Command() {
 *   useEffect(() => {
 *     setTimeout(() => {
 *       popToRoot({ clearSearchBar: true });
 *     }, 3000);
 *   }, []);
 *
 *   return <Detail markdown="See you soon ðŸ‘‹" />;
 * }
 * ```
 */
export declare function popToRoot(options?: {
    clearSearchBar?: boolean;
}): Promise<void>;
/**
 * Clear the text in the search bar.
 *
 * @param options - Can be used to force scrolling to the top. Defaults to scrolling to the top after the
 * the search bar was cleared.
 * @returns A Promise that resolves when the search bar is cleared.
 */
export declare function clearSearchBar(options?: {
    forceScrollToTop?: boolean;
}): Promise<void>;
/**
 * Utils
 */
/**
 * Shows a file or directory in the Finder.
 *
 * @param path - The path to show in the Finder.
 * @returns A Promise that resolves when the item is revealed in the Finder.
 *
 * @example
 * ```typescript
 * import { showInFinder } from "@raycast/api"
 * import { homedir } from "os"
 * import { join } from "path"
 * showInFinder(join(homedir(), "Downloads"))
 * ```
 */
export declare function showInFinder(path: PathLike): Promise<void>;
/**
 * Moves a file or directory to the Trash.
 *
 * @param paths - The item or items to move to the trash.
 * @returns A Promise that resolves when all files are moved to the trash.
 *
 * @example
 * ```typescript
 * import { trash } from "@raycast/api";
 * import { writeFile } from "fs/promises";
 * import { homedir } from "os";
 *
 * export default async () => {
 *   const file = `${homedir()}/Desktop/yolo.txt`;
 *   await writeFile(file, "I will be deleted soon!");
 *   await trash(file);
 * };
 * ```
 */
export declare function trash(path: PathLike | PathLike[]): Promise<void>;
/**
 * An object that represents a locally installed application on the system.
 *
 * @remarks
 * It can be used to open files or folders in a specific application. Use {@link getApplications} or
 * {@link getDefaultApplication} to get applications that can open a specific file or folder.
 */
export interface Application {
    /**
     * The display name of the application.
     */
    name: string;
    /**
     * The absolute path to the application bundle, e.g. `/Applications/Raycast.app`,
     */
    path: string;
    /**
     * The bundle identifier of the application, e.g. `com.raycast.macos`.
     */
    bundleId?: string;
}
/**
 * Returns all applications that can open the file.
 *
 * @param path The path of the file or folder to get the applications for. If no path is specified, all installed applications are returned.
 * @returns An array of {@link Application}.
 *
 * @example
 * ```typescript
 * import { getApplications } from "@raycast/api";
 *
 * export default async () => {
 *   const installedApplications = await getApplications();
 *   console.log("The following applications are installed on your Mac:");
 *   console.log(installedApplications.map((a) => a.name).join(", "));
 * };
 * ```
 */
export declare function getApplications(path?: PathLike): Promise<Application[]>;
/**
 * Returns the default application that the file would be opened with.
 *
 * @param path The path of the file or folder to get the default application for.
 * @returns The default {@link Application} that would open the file. Throws an error if no application was found.
 *
 * @example
 * ```typescript
 * import { getDefaultApplication } from "@raycast/api";
 *
 * export default async () => {
 *   const defaultApplication = await getDefaultApplication(__filename);
 *   console.log(`Default application for JavaScript is: ${defaultApplication.name}`);
 * };
 * ```
 */
export declare function getDefaultApplication(path: PathLike): Promise<Application>;
/**
 * Opens a target with the default application or specified application.
 *
 * @param target The file, folder or URL to open.
 * @param application The application name to use for opening the file. If no application is specified, the default application as determined by the system
 * is used to open the specified file. Note that you can use the application name, app identifier, or absolute path to the app.
 * @returns A Promise that resolves when the target has been opened.
 *
 * @example
 * ```typescript
 * import { open } from "@raycast/api";
 *
 * export default async () => {
 *   await open("https://www.raycast.com", "com.google.Chrome");
 * };
 * ```
 */
export declare function open(target: string, application?: Application | string): Promise<void>;
