/**
 * Retrieve all stored values in the local storage of an extension.
 *
 * @returns A Promise that resolves with an object containing all {@link Values}.
 *
 * @example
 * ```typescript
 * import { LocalStorage } from "@raycast/api";
 *
 * interface Values {
 *   todo: string;
 *   priority: number;
 * }
 *
 * export default async () => {
 *   const items = await LocalStorage.allItems<Values>();
 *   console.log(`Local storage item count: ${Object.entries(items).length}`);
 * };
 * ```
 */
export declare function allItems<T extends Values = Values>(): Promise<T>;
/**
 * Retrieve the stored value for the given key.
 *
 * @param key - The key you want to retrieve the value of.
 * @returns A Promise that resolves with the stored value for the given key. If the key does not exist, `undefined` is returned.
 *
 * @example
 * ```typescript
 * import { LocalStorage } from "@raycast/api";
 *
 * export default async () => {
 *   const item = await LocalStorage.getItem<string>("favorite-fruit");
 *   console.log(item);
 * };
 * ```
 */
export declare function getItem<T extends Value = Value>(key: string): Promise<T | undefined>;
/**
 * Stores a value for the given key.
 *
 * @param key - The key you want to create or update the value of.
 * @param value - The value you want to create or update for the given key.
 * @returns A Promise that resolves when the value is stored.
 *
 * @example
 * ```typescript
 * import { LocalStorage } from "@raycast/api";
 *
 * export default async () => {
 *   await LocalStorage.setItem("favorite-fruit", "cherry");
 * };
 * ```
 */
export declare function setItem(key: string, value: Value): Promise<void>;
/**
 * Removes the stored value for the given key.
 *
 * @param key - The key you want to remove the value of.
 * @returns A Promise that resolves when the value is removed.
 *
 * @example
 * ```typescript
 * import { LocalStorage } from "@raycast/api";
 *
 * export default async () => {
 *   await LocalStorage.removeItem("favorite-fruit");
 * };
 * ```
 */
export declare function removeItem(key: string): Promise<void>;
/**
 * Removes all stored values of an extension.
 *
 * @returns A Promise that resolves when all values are removed.
 *
 * @example
 * ```typescript
 * import { LocalStorage } from "@raycast/api";
 *
 * export default async () => {
 *   await LocalStorage.clear();
 * };
 * ```
 */
export declare function clear(): Promise<void>;
/**
 * Supported storage value types.
 *
 * @example
 * ```typescript
 * import { LocalStorage } from "@raycast/api";
 *
 * export default async () => {
 *   // string
 *   await LocalStorage.setItem("favorite-fruit", "cherry");
 *
 *   // number
 *   await LocalStorage.setItem("fruit-basket-count", 3);
 *
 *   // boolean
 *   await LocalStorage.setItem("fruit-eaten-today", true);
 * };
 * ```
 */
export declare type Value = string | number | boolean;
/**
 * Values of local storage items.
 *
 * > For type-safe values, you can define your own interface. Use the keys of the local storage items as the property names.
 */
export interface Values {
    /**
     * The local storage value of a given key.
     */
    [key: string]: any;
}
